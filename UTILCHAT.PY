from .. import loader, utils
import asyncio

class MassX(loader.Module):
    strings = {"name": "MassX"}
    
    def __init__(self):
        self.chats = []
        self.auto_mode = False
        self.delay = 2

    async def client_ready(self, client, db):
        await client.send_message('me', "üîπ MassX –∞–∫—Ç–∏–≤–µ–Ω!\nüì¢ –ö–æ–º–∞–Ω–¥—ã:\n‚Ä¢ .ms <—Ç–µ–∫—Å—Ç/—Ä–µ–ø–ª–∞–π>\n‚Ä¢ .add <—á–∞—Ç>\n‚Ä¢ .del <—á–∞—Ç>\n‚Ä¢ .list\n‚Ä¢ .auto\n‚Ä¢ .stop\n‚Ä¢ .speed <—Å–µ–∫—É–Ω–¥—ã>")

    async def ms(self, message):
        reply = await message.get_reply_message()
        args = utils.get_args_raw(message)
        
        if not args and not reply:
            return await message.edit("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ä–µ–ø–ª–∞—è!")
            
        if not self.chats:
            return await message.edit("‚ö†Ô∏è –ù–µ—Ç —á–∞—Ç–æ–≤!")
            
        content = reply.text if reply else args
        await self.send_message_to_chats(message.client, content)
        await message.edit(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {len(self.chats)} —á–∞—Ç(–æ–≤)")

    async def add(self, message):
        args = utils.get_args_raw(message)
        if not args:
            return await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∞—Ç")
        if args in self.chats:
            return await message.edit("‚ö†Ô∏è –ß–∞—Ç —É–∂–µ –µ—Å—Ç—å")
        self.chats.append(args)
        await message.edit(f"‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ: {len(self.chats)}")

    async def delete(self, message):
        args = utils.get_args_raw(message)
        if not args or args not in self.chats:
            return await message.edit("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        self.chats.remove(args)
        await message.edit(f"‚úÖ –ß–∞—Ç —É–¥–∞–ª—ë–Ω. –û—Å—Ç–∞–ª–æ—Å—å: {len(self.chats)}")

    async def list(self, message):
        if not self.chats:
            return await message.edit("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        await message.edit(f"üìú –ß–∞—Ç—ã ({len(self.chats)}):\n" + "\n".join(f"‚Ä¢ {chat}" for chat in self.chats))

    async def auto(self, message):
        if not self.chats:
            return await message.edit("‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤")
        self.auto_mode = True
        await message.edit(f"‚ôæ –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ (–∑–∞–¥–µ—Ä–∂–∫–∞: {self.delay} —Å–µ–∫)")
        while self.auto_mode:
            await self.send_message_to_chats(message.client, "–ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ")
            await asyncio.sleep(self.delay)

    async def stop_auto(self, message):
        if not self.auto_mode:
            return await message.edit("‚ÑπÔ∏è –£–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        self.auto_mode = False
        await message.edit("‚èπ –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")

    async def set_speed(self, message):
        args = utils.get_args_raw(message)
        if not args or not args.isdigit():
            return await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥")
        self.delay = int(args)
        await message.edit(f"‚è± –ó–∞–¥–µ—Ä–∂–∫–∞: {self.delay} —Å–µ–∫")

    async def send_message_to_chats(self, client, text):
        for chat in self.chats:
            try:
                await client.send_message(chat, text)
                await asyncio.sleep(0.5)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ {chat}: {e}")