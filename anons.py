import asyncio
import random
import logging
from hikka import loader

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß–∞—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã
TARGET_CHAT = "@palata_6numberr"

# –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
MESSAGE_TEXT = (
    "üåü –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –Ω–∞ –ª–∞–º–ø–æ–≤—ã–µ –ø–æ—Å–∏–¥–µ–ª–∫–∏ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ! üåü\n\n"
    "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –¥—Ä—É–∂–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, –≥–¥–µ –≤–∞—Å –∂–¥—É—Ç:\n\n"
    "‚ú® –î–æ–±—Ä—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –≥–æ—Ç–æ–≤—ã–µ –ø–æ–º–æ—á—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å!\n"
    "üéâ –£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –Ω–∞ –∑–≤—ë–∑–¥—ã!\n"
    "üí¨ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –≤–µ—Å—ë–ª—ã–µ –±–µ—Å–µ–¥—ã!\n\n"
    "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –¥—Ä—É–∂–Ω–æ–π —Å–µ–º—å–∏!\n\n"
    "üë®‚Äçüë©‚Äçüëß –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–µ–º—å–µ:\n\n"
    "üîû –í–æ–∑—Ä–∞—Å—Ç: –æ—Ç 13\n"
    "üë§ –ü–æ–ª: –Ω–µ –≤–∞–∂–µ–Ω!!!\n\n"
    "üëâ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: @palata_6numberr\n\n"
    "–ñ–¥–µ–º –≤–∞—Å —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º! üíñ"
)

is_running = False  # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏


class AutoChat(loader.Module):
    """–ê–≤—Ç–æ-–ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –∏ —Ä–µ–∫–ª–∞–º–∞"""
    strings = {"name": "AutoChat"}

    async def client_ready(self, client, db):
        self.client = client
        logger.info("–ú–æ–¥—É–ª—å AutoChat –∑–∞–≥—Ä—É–∂–µ–Ω.")

    async def watcher(self, message):
        global is_running

        try:
            if not message.text:
                return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞

            text = message.text.strip().lower()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
            if text == "/i" and not is_running:
                is_running = True
                logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")
                await asyncio.sleep(5)
                await self.client.send_message(TARGET_CHAT, "–ò—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üåÄ")
                return

            if is_running:
                if "—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥!" in message.raw_text.lower():
                    logger.info("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω, –∏—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
                    await asyncio.sleep(3)
                    await self.client.send_message(TARGET_CHAT, "–ò—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üåÄ")
                    return

                if "üí≠ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ, –æ–±—â–∞–π—Ç–µ—Å—å!" in message.raw_text.lower():
                    logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —á–∞—Ç.")
                    await self.client.send_message(TARGET_CHAT, MESSAGE_TEXT)

                    await asyncio.sleep(random.randint(1, 3))

                    logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ª–æ–≥.")
                    await self.client.send_message(TARGET_CHAT, "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å üíî")
                    return

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")